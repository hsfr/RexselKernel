// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
//
// XSL to Rexsel Translator
//
// This is a simple translator which takes syntactically correct XSLT
// and outputs a valid Rexsel stylesheet. No error detection on the
// inputted XSLT is carried out. Once the Rexsel is produced the Rexsel
// compiler should detect any errors in the original XSLT.
//
// Author:
//    Name  : Hugh Field-Richards
//    Email : hsfr@hsfr.org.uk
//
//  Copyright 2024 Hugh Field-Richards.
//
// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
//
// LICENSE
//
// Rexsel is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
// -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

stylesheet {
    version "1.0"
    id "xsl-rexsel"
    
    output {
        method text
    }

    xmlns "rng"   "http://relaxng.org/ns/structure/1.0"
    xmlns "a"     "http://relaxng.org/ns/annotation/1.0"
    xmlns "dc"    "http://purl.org/dc/elements/1.1/"
    xmlns "xhtml" "http://www.w3.org/1999/xhtml"
    xmlns "sch"   "http://www.ascc.net/xml/schematron"

    constant doubleQuote "'&#34;'"
    constant space "' '"
    constant ampersand "'&#38;'"

    constant openCurlyBracket "'&#123;'"
    constant closeCurlyBracket "'&#125;'"

    constant solidus "'&#47;'"
    constant revSolidus "'&#92;'"

    constant lessThan "'&#60;'"
    constant greaterThan "'&#62;'"

    constant identSpaces "'    '"
    constant return { text "
" }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* PROCESS FILE -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "/" {
        text "stylesheet {"
        value "$return"
        apply-templates using "//xsl:stylesheet/@*" scope "prefix" {
            with spaces "$identSpaces"
        }
        call outputNamespaces
        apply-templates using "//xsl:stylesheet/*" {
            with spaces "$identSpaces"
        }
        text "}"
        value "$return"
   }
    
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    
    function outputNamespaces {
        parameter spaces
        variable newSpaces "concat( $spaces, $identSpaces )"
        
        foreach "//xsl:stylesheet/namespace::*" {
            variable namespaceName "name(.)"
            variable namespaceValue "."
            
            value "concat( $newSpaces, 'xmlns ', $doubleQuote, $namespaceName, $doubleQuote )"
            value "concat( $space, $doubleQuote, $namespaceValue, $doubleQuote, $return )"
        }
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "@version" scope "prefix" {
        parameter spaces
        
        value "concat( $spaces, 'version ', $doubleQuote, ., $doubleQuote, $return )"
    }
    
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "@id" scope "prefix" {
        parameter spaces
        
        value "concat( $spaces, 'id ', $doubleQuote, ., $doubleQuote, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "@lang" scope "prefix" {
        parameter spaces
        
        value "concat( $spaces, 'lang ', $doubleQuote, ., $doubleQuote, $return )"
    }
    
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    function  replaceStrings {
        parameter txt
        
        choose {
            when "contains( $txt, $revSolidus )" {
                value "substring-before( $txt, $revSolidus )"
                value "concat( $revSolidus, $revSolidus )"
                call replaceStrings {
                    with txt "substring-after( $txt, $revSolidus )"
                }
            }
            when "contains( $txt, $doubleQuote )" {
                value "substring-before( $txt, $doubleQuote )"
                value "concat( $revSolidus, $doubleQuote )"
                call replaceStrings {
                    with txt "substring-after( $txt, $doubleQuote )"
                }
            }
            when "contains( $txt, $lessThan )" {
                value "substring-before( $txt, $lessThan )"
                value "'&lt;'"
                call replaceStrings {
                    with txt "substring-after( $txt, $lessThan )"
                }
            }
            when "contains( $txt, $greaterThan )" {
                value "substring-before( $txt, $greaterThan )"
                value "'&gt;'"
                call replaceStrings {
                    with txt "substring-after( $txt, $greaterThan )"
                }
            }
            when "contains( $txt, $ampersand )" {
                value "substring-before( $txt, $ampersand )"
                value "'&#38;'"
                call replaceStrings {
                    with txt "substring-after( $txt, $ampersand )"
                }
            }
            otherwise {
                value "$txt"
            }
        }
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    function pvwOutput {
        parameter inName
        parameter inValue
        parameter inKeyword
        parameter spaces
    
        variable conditionedValue {
           call replaceStrings {
              with txt "$inValue"
           }
        }
    
        variable newSpaces "concat( $spaces, $identSpaces )"
        variable plainText "text()" 
        variable conditionedPlainText {
           call replaceStrings {
              with txt "$plainText"
           }
        }
  
        choose {
            when "$inValue" {
                // For example
                //   <with-param name="<name>" select="<value>"/> ===> with <name> "<value>"
                value "concat( $spaces, $inKeyword, $space, $inName, $space, $doubleQuote, $conditionedValue, $doubleQuote, $return )"
            }
            otherwise {
                // <with-param name="<name>"> text </with-param> ===> with <name> { ... }
                // However the contents (first element might be plain text).
                value "concat( $spaces, $inKeyword, $space, $inName )"
                choose {
                    when "not( *[1] )" {
                        if "count( $plainText ) > 0" {
                            value "concat( $space, $openCurlyBracket, $return )"
                            value "concat( $spaces, 'text ', $doubleQuote, $conditionedPlainText, $doubleQuote )"
                            value "concat( $space, $closeCurlyBracket )"
                        }
                    }
                    otherwise {
                        // <with-param name="<name>"> elements </with-param> ===> with <name> { ... }
                        value "concat( $space, $openCurlyBracket, $return )"
                        apply-templates using "./*" {
                            with spaces "$newSpaces"
                        }
                        value "concat( $space, $closeCurlyBracket )"
                    }
                }
                value "$return"
            }
        }
    }
    
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-* XSLT ELEMENTS *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:apply-imports" {
        parameter spaces

        value "concat( $spaces, 'apply-imports', $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:apply-templates" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $spaces, 'apply-templates ' )"
        if "@select" {
            value "concat( ' using ', $doubleQuote, @select, $doubleQuote )"
        }
        if "@mode" {
            value "concat( ' scope ', $doubleQuote, @mode, $doubleQuote )"
        }
        if "./*" {
            value "concat( $space, $openCurlyBracket, $return )"
            apply-templates using "./*" {
                with spaces "$newSpaces"
            }
            value "concat( $spaces, $closeCurlyBracket )"
        }
        value "$return"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:attribute" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable plainText "text()"

        value "concat( $spaces, 'attribute ', $doubleQuote, @name, $doubleQuote )"
        if "@namespace" {
            value "concat( ' namespace', $doubleQuote, @namespace, $doubleQuote )"
        }
        choose {
            when "not( *[1] )" {
                if "count( $plainText ) > 0" {
                    value "concat( $space, $openCurlyBracket, $return )"
                    value "concat( $newSpaces, 'text ', $doubleQuote, $plainText, $doubleQuote, $return )"
                    value "concat(  $spaces, $closeCurlyBracket, $return )"
                }
            }
            otherwise {
                value "concat( $space, $openCurlyBracket, $return )"
                apply-templates using "./*" {
                    with spaces "$newSpaces"
                }
                value "concat( $spaces, $closeCurlyBracket )"
            }
        }
        value "$return"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:attribute-set" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable attributeName "@name"
        variable useAttributeSets "@use-attribute-sets"
        variable keyword "'attribute-set'"

        value "concat( $spaces, $keyword, $space, $doubleQuote, $attributeName, $doubleQuote )"
        value "concat( $space, $openCurlyBracket, $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces,'}' )"
        value "$return"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:call-template" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable nameValue "@name"

        choose {
            when "./*" {
                value "concat( $spaces, 'call ', $nameValue, $space, $openCurlyBracket, $return )"
                apply-templates using "./*" {
                    with spaces "$newSpaces"
                }
                value "concat( $spaces, $closeCurlyBracket, $return )"
            }
            otherwise {
                value "concat( $spaces, 'call ', $nameValue, $return )"
            }
        }
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:choose" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $spaces, 'choose {', $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:comment" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable keyword "'comment'"

        value "concat( $spaces, 'comment {', $return )"
            apply-templates using "./*" {
                with spaces "$newSpaces"
            }
            value "concat( $spaces, $closeCurlyBracket, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:copy" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable useAttributeSets "@use-attribute-sets"

        choose {
            when "$useAttributeSets" {
                value "concat( $spaces, 'copy use-attribute-sets', $useAttributeSets, $space, $openCurlyBracket, $return )"
            }
            otherwise {
                value "concat( $spaces, 'copy {', $return )"
            }
        }
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:copy-of" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable selectValue "@select"

        value "concat( $spaces, 'copy ', $doubleQuote, $selectValue, $doubleQuote, $return )"
   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:decimal-format" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $return, $spaces, 'decimal-format ', $openCurlyBracket, $return )"
        if "@name" {
            value "concat( $newSpaces, 'name ', $doubleQuote, @name, $doubleQuote, $return )"
        }
        if "@decimal-separator" {
            value "concat( $newSpaces, 'decimal-separator ', $doubleQuote, @decimal-separator, $doubleQuote, $return )"
        }
        if "@grouping-separator" {
            value "concat( $newSpaces, 'grouping-separator ', $doubleQuote, @grouping-separator, $doubleQuote, $return )"
        }
        if "@infinity" {
            value "concat( $newSpaces, 'infinity ', $doubleQuote, @infinity, $doubleQuote, $return )"
        }
        if "@minus-sign" {
            value "concat( $newSpaces, 'minus-sign ', $doubleQuote, @minus-sign, $doubleQuote, $return )"
        }
        if "@NaN" {
            value "concat( $newSpaces, 'NaN ', $doubleQuote, @NaN, $doubleQuote, $return )"
        }
        if "@percent" {
            value "concat( $newSpaces, 'percent ', $doubleQuote, @percent, $doubleQuote, $return )"
        }
        if "@per-mille" {
            value "concat( $newSpaces, 'per-mille ', $doubleQuote, @per-mille, $doubleQuote, $return )"
        }
        if "@zero-digit" {
            value "concat( $newSpaces, 'zero-digit ', $doubleQuote, @zero-digit, $doubleQuote, $return )"
        }
        if "@digit" {
            value "concat( $newSpaces, 'digit ', $doubleQuote, @digit, $doubleQuote, $return )"
        }
        if "@pattern-separator" {
            value "concat( $newSpaces, 'pattern-separator ', $doubleQuote, @pattern-separator, $doubleQuote, $return )"
        }
        value "concat( $return, $closeCurlyBracket, $return )"

   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:element" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable nameValue "@name"

        value "concat( $spaces, 'element ', $doubleQuote, $nameValue, $doubleQuote, $space, $openCurlyBracket, $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:for-each" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable selectValue "@select"

        value "concat( $spaces, 'foreach ', $doubleQuote, $selectValue, $doubleQuote, $space, $openCurlyBracket, $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:if" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable testValue "@test"
        variable conditionedValue {
           call replaceStrings {
              with txt "$testValue"
           }
        }
   

        value "concat( $spaces, 'if ', $doubleQuote, $conditionedValue, $doubleQuote, $space, $openCurlyBracket, $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:include" {
        parameter spaces

        value "concat( $spaces, 'include ', $doubleQuote, @href, $doubleQuote, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:import" {
        parameter spaces

        value "concat( $spaces, 'import ', $doubleQuote, @href, $doubleQuote, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:key" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $return, $spaces, 'key' )"
        value "concat( ' name ', $doubleQuote, @name, $doubleQuote )"
        value "concat( ' using ', $doubleQuote, @match, $doubleQuote )"
        value "concat( ' keyNodes ', $doubleQuote, @use, $doubleQuote, $return )"
   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:message" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $spaces, 'message' )"
        if "@terminate" {
            value "concat( ' terminate', $doubleQuote, @terminate, $doubleQuote )"
        }
        value "concat( $space, $openCurlyBracket, $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:namespace-alias" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $return, $spaces, 'namespace-alias' )"
        value "concat( ' map-from ', $doubleQuote, @stylesheet-prefix, $doubleQuote )"
        value "concat( ' to ', $doubleQuote, @result-prefix, $doubleQuote, $return )"
   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:number" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $return, $spaces, 'number ', $openCurlyBracket, $return )"
        if "@count" {
            value "concat( $newSpaces, 'count ', $doubleQuote, @count, $doubleQuote, $return )"
        }
        if "@level" {
            value "concat( $newSpaces, 'level ', @level, $return )"
        }
        if "@from" {
            value "concat( $newSpaces, 'from ', $doubleQuote, @from, $doubleQuote, $return )"
        }
        if "@value" {
            value "concat( $newSpaces, 'value ', $doubleQuote, @value, $doubleQuote, $return )"
        }
        if "@format" {
            value "concat( $newSpaces, 'format ', $doubleQuote, @format, $doubleQuote, $return )"
        }
        if "@lang" {
            value "concat( $newSpaces, 'lang ', $doubleQuote, @lang, $doubleQuote, $return )"
        }
        if "@letter-value" {
            value "concat( $newSpaces, 'letter-value ', @letter-value, $return )"
        }
        if "@grouping-separator" {
            value "concat( $newSpaces, 'grouping-separator ', $doubleQuote, @grouping-separator, $doubleQuote, $return )"
        }
        if "@grouping-size" {
            value "concat( $newSpaces, 'grouping-size ', $doubleQuote, @grouping-size, $doubleQuote, $return )"
        }
        value "concat( $return, $closeCurlyBracket, $return )"
   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:otherwise" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $spaces, 'otherwise {', $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:output" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $return, $spaces, 'output ', $openCurlyBracket, $return )"
        if "@method" {
            value "concat( $newSpaces, 'method ', @method, $return )"
        }
        if "@version" {
            value "concat( $newSpaces, 'version ', $doubleQuote, @version, $doubleQuote, $return )"
        }
        if "@encoding" {
            value "concat( $newSpaces, 'encoding ', $doubleQuote, @encoding, $doubleQuote, $return )"
        }
        if "@omit-xml-declaration" {
            value "concat( $newSpaces, 'omit-xml-declaration ', @omit-xml-declaration, $return )"
        }
        if "@standalone" {
            value "concat( $newSpaces, 'standalone ', @standalone, $return )"
        }
        if "@doctype-public" {
            value "concat( $newSpaces, 'doctype-public ', $doubleQuote, @doctype-public, $doubleQuote, $return )"
        }
        if "@doctype-system" {
            value "concat( $newSpaces, 'doctype-system ', $doubleQuote, @doctype-system, $doubleQuote, $return )"
        }
        if "@cdata-section-elements" {
            value "concat( $newSpaces, 'cdata-section-elements ', $doubleQuote, @cdata-section-elements, $doubleQuote, $return )"
        }
        if "@indent" {
            value "concat( $newSpaces, 'indent ', @indent, $return )"
        }
        if "@media-type" {
            value "concat( $newSpaces, 'media-type ', $doubleQuote, @media-type, $doubleQuote, $return )"
        }
        value "concat( $spaces, $closeCurlyBracket, $return)"

   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:param"  {
        parameter spaces

        call pvwOutput {
            with inName "@name"
            with inValue "@select"
            with inKeyword "'parameter'"
            with spaces "$spaces"
        }
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:preserve-space" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $spaces, 'preserve-space ', $doubleQuote, @elements, $doubleQuote, $return )"
   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:processing-instruction" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable nameValue "@name"

        value "concat( $spaces, 'processing-instruction ', $doubleQuote, $nameValue, $doubleQuote, $space, $openCurlyBracket, $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
     }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:sort" {
        parameter spaces

        value "concat( $spaces, 'sort ' )"
        if "@select" {
            value "concat( ' using ', $doubleQuote, @select, $doubleQuote )"
        }
        if "@order" {
            value "concat( $space, @order )"
        }
        if "@case-order" {
            value "concat( $space, @case-order )"
        }
        if "@lang" {
            value "concat( ' lang ', $doubleQuote, @lang, $doubleQuote )"
        }
        if "@data-type" {
            value "concat( $space, @data-type )"
        }
        value "$space"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:strip-space" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"

        value "concat( $spaces, 'strip-space ', $doubleQuote, @elements, $doubleQuote, $return )"
   }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:template" {
        parameter spaces
        
        variable newSpaces "concat( $spaces, $identSpaces )"

        choose {
            when "@name" {
                value "concat( $return, $spaces, 'function  ', @name, $space, $openCurlyBracket, $return )"
                apply-templates using "./*" {
                    with spaces "$newSpaces"
                }
                value "concat( $spaces, $closeCurlyBracket, $return )"
            }
            otherwise { 
                value "concat( $return, $spaces, 'match ' )"
                if "@match" {
                    value "concat( ' using ', $doubleQuote, @match, $doubleQuote )"
                }
                if "@mode" {
                    value "concat( ' scope ', $doubleQuote, @mode, $doubleQuote )"
                }
                if "@priority" {
                    value "concat( ' priority ', $doubleQuote, @priority, $doubleQuote )"
                }
                value "concat( $space, $openCurlyBracket, $return )"
                apply-templates using "./*" {
                    with spaces "$newSpaces"
                }
                value "concat( $spaces, $closeCurlyBracket, $return )"
            }
        }
    }
    
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:text" {
        parameter spaces

        variable conditionedText {
            call replaceStrings {
               with txt "."
            }
        }

        value "concat( $spaces, 'text' )"
        if "@disable-output-escaping" {
            value "concat( ' disable-output-escaping', $doubleQuote, @disable-output-escaping, $doubleQuote )"
        }
        value "concat( $space, $doubleQuote, $conditionedText, $doubleQuote, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:value-of" {
        parameter spaces
        
        value "concat( $spaces, 'value ', $doubleQuote, @select, $doubleQuote, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:variable" {
        parameter spaces

        call pvwOutput {
            with inName "@name"
            with inValue "@select"
            with inKeyword "'variable'"
            with spaces "$spaces"
       }
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:when" {
        parameter spaces

        variable newSpaces "concat( $spaces, $identSpaces )"
        variable conditionedValue {
           call replaceStrings {
              with txt "@test"
           }
        }
        value "concat( $spaces, 'when ', $doubleQuote, $conditionedValue, $doubleQuote, $space, $openCurlyBracket, $return )"
        apply-templates using "./*" {
            with spaces "$newSpaces"
        }
        value "concat( $spaces, $closeCurlyBracket, $return )"
    }

    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    match using "xsl:with-param"  {
        parameter spaces

        call pvwOutput {
          with inName "@name"
          with inValue "@select"
          with inKeyword "'with'"
          with spaces "$spaces"
        }
    }


    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
    //
    // Process Remaining Elements
    //
    // Soak up any remaining elements not processed by the above.

    match using "node() | @*" { }


}
